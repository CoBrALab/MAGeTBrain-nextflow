nextflow.enable.dsl=2

params {
    primarySpectra = 'T1w'
    inputDir = 'inputs'
    outputDir = 'output'
}


profiles {
    standard {
      process {
        container = 'ghcr.io/cobralab/magetbrain-nextflow:master'
        executor = 'local'
      }
      apptainer.enabled = true
    }
    niagara {
      process {
        executor = 'slurm'
        queueSize = 1000
        // can add other exit status to the array
        errorStrategy = {task.exitStatus in [1] ? 'retry' : 'finish'}
        maxRetries = 3

        cpus = 40
        time = '1h'
        clusterOptions = '--nodes=1'

        withName: registerAffine {
          cpus = 20
          clusterOptions = '--nodes=1'
          time = '3h' 
        }
        withName: registerNonlinear {
          cpus = 8
          clusterOptions = '--nodes=1'
          time = '5h' 
        }
        withName: resampleLabel {
          cpus = 40
          time = 15.min
          clusterOptions = '--nodes=1'
        }
        withName: majorityVote {
          cpus = 20
          time = 15.min
          clusterOptions = '--nodes=1'
        }
      }
    }
    beluga {
        process {
            executor = 'slurm'
            queueSize = 1000
            memory = 186.GB
            cpus = 40
            time = 168.h
        }
    }
    cedar{
        process {
            executor = 'slurm'
            queueSize = 1000
            memory = 186.GB
            cpus = 48
            time = 672.h
        }
    }
    nibi{
        process {
            executor = 'slurm'
            queueSize = 1000
            memory = 186.GB
            cpus = 40
            time = 168.h
        }
    }
    narval{
        process {
            executor = 'slurm'
            queueSize = 1000
            memory = 249.GB
            cpus = 64
            time = 168.h
        }
    }
    rorqual{
        process {
            executor = 'slurm'
            queueSize = 1000
            memory = 750.GB
            cpus = 192
            time = 168.h
        
        }
    }
}

process {
  errorStrategy = 'finish'
  cache = 'lenient'
}

report {
  enabled = true
}

dag {
  enabled = true
  verbose = true
}

timeline {
  enabled = true
}
